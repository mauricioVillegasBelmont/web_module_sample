@use "sass:meta";
@use "sass:math";
@use 'sass:list';
@use "sass:map";
@use "sass:string";
@use "sass:selector";

//  /* config functiones */
$ASSET_VERSION: ''  !default;
$CSS_IMAGES_PATH: '/'  !default;
@function site_background_image($img){
  $bg_img: $CSS_IMAGES_PATH + $img;
  $_version:'';
  @if not ( empty_value($ASSET_VERSION) ) {
    $_version: str-concat(('?v=', $ASSET_VERSION), '');
  }
  @return url(unquote("#{$bg_img}#{$_version}"));
}

@function empty_value($value) {
  @if not $value or $value == "" or $value == 0 or $value == () or length($value) == 0 {
    @return true;
  }
  @return false;
}

@function calculate_margin_padding_value($mult,$coeficient:$FIBONACCI_SERIE_U,$_base_units:.125rem){
    @if $mult == 'auto'{
      @return unquote($mult);
    }
    @return nth($coeficient, $mult) * $_base_units;
}
@function get_breakpoint_keys_list( $query_breakpoint:$utility_breakpoints ){
  $utilitybreakpoint_array:();
  @each $b_key in $query_breakpoint{
    @if map.has-key($breakpoints, $b_key) and ( map.get($breakpoints, $b_key) > 0 ) and ( list.index($utilitybreakpoint_array, $b_key) == null ) {
      $utilitybreakpoint_array: list.append($utilitybreakpoint_array,$b_key);
    }
  }
  @return $utilitybreakpoint_array;
}
@function get_map_breakpoints( $query_breakpoint:$utility_breakpoints ){
  $breakpoint_array:();
  @each $b_key in $query_breakpoint{
    @if map.has-key($breakpoints, $b_key) and ( map.get($breakpoints, $b_key) > 0 ) and ( list.index($breakpoint_array, $b_key) == null ) {
      $_value: map.get($breakpoints, $b_key);
      $breakpoint_array: map.set($breakpoint_array,$b_key, $_value);
    }
  }
  @return $breakpoint_array;
}
@function get_map_array( $from_arr, $map ){
  $_arr:();
  @each $key in $map{
    @if map.has-key($from_arr,  $key) and ( list.index($from_arr, $key) == null ) {
      $_value: map.get($from_arr, $key);
      $_arr: map.set($_arr,$key, $_value);
    }
  }
  @return $_arr;
}

@function get_map_value($arr, $val){
  @return map.get($arr, $val);
}
@function to_number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + _divide(map-get($numbers, $character), $digits);
      }
    }
  }

  @return if($minus, -$result, $result);;
}